workflows:
  react-native-android:
    name: React Native Android
    max_build_duration: 120
    environment:
      groups:
        - keystore credentials
        - firebase_credentials
        - discord_credentials 
      vars:
        PACKAGE_NAME: 'com.exploreApp' # <-- Put your package name here e.g. com.domain.myapp
        node: latest
        CM_CLONE_DEPTH: 8
        CM_PULL_REQUEST: true
    triggering:
      events:
        - push
        - tag
        - pull_request
      branch_patterns:
        - pattern: main
          include: true
          source: true
    scripts:
      - name: Create a changelog
        script: | 
          if [[ -z ${CM_PREVIOUS_COMMIT} ]]
            then
             echo "No finished builds found to generate changelog" | tee release_notes.txt
            else
             echo "$(git-changelog generate --previous-commit $CM_PREVIOUS_COMMIT)" | tee release_notes.txt
          fi
      - name: Generating release notes with git commits
        script: | 
          git fetch --all --tags
          branch=$(git branch --show-current)
          prev_tag=$(git for-each-ref --sort=-creatordate  --format '%(objectname)' refs/tags | sed -n 2p )
          notes=$(git log --first-parent --pretty=format:"- %s" "$prev_tag"..HEAD)
          echo "[D2D Staging - $branch] \n $notes" | tee release_notes.txt
      - name: pre_build_script
        script: |
          #!/usr/bin/env sh
          export VARNAME="my value"
          set -e # exit on first failed command
          echo $ANDROID_FIREBASE_SECRET | base64 --decode > $CM_BUILD_DIR/android/app/google-services.json
          # echo $IOS_FIREBASE_SECRET | base64 --decode > $CM_BUILD_DIR/ios/Runner/GoogleService-Info.plist
      - name: Install yarn dependencies
        script: |
          yarn
      - name: Set Android SDK location
        script: |
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$FCI_BUILD_DIR/android/local.properties"         
      - name: Set up keystore
        script: |
          echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
          # The following script creates key.properties file and stores the credentials in it. As we configure code signing in app/build.gradle file, the following part is unnecessary unless code signing is configured differently as explained in the documentation: https://docs.codemagic.io/flutter-code-signing/android-code-signing/
          cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
          storePassword=$CM_KEYSTORE_PASSWORD
          keyPassword=$CM_KEY_ALIAS_PASSWORD
          keyAlias=$CM_KEY_ALIAS_USERNAME
          storeFile=/tmp/keystore.keystore
          EOF
      - name: Build Android release
        script: |
          # Set environment variable so it can be used to increment build number in android/app/build.gradle
          # Note that tracks can be specified when retrieving latest build number from Google Play, for example:
          # export NEW_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks=alpha) + 1))
          # export LATEST_GOOGLE_PLAY_BUILD_NUMBER=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME") + 1))
          # cd hello_world/android/ && ./gradlew assembleDebug
          cd android && ./gradlew assembleRelease
    artifacts:
      - android/app/build/outputs/**/*.apk
    publishing:
      # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
      email:
        recipients:
          - ahmadfathonizumaro@gmail.com
          - toniebe48@gmail.com
        notify:
          success: true # To not receive a notification when a build succeeds
          failure: false # To not receive a notification when a build fails
      firebase:
        firebase_service_account: $FIREBASE_SERVICE_ACCOUNT
        android: 
          app_id: 1:953175852743:android:add8ee72c4c87177f1a0e2
          groups: 
            - "codemagic-tester" # following group tester in firebase
          artifact_type: 'apk'
      scripts:
        - name: Discord notification
          script: | 
            set -ex
            APP_LINK=$(echo $CM_ARTIFACT_LINKS | jq -r '.[] | select(.name=="release-app.apk") | .url')
          
            # Get first 7 digits of commit number
            COMMIT=$(echo "${CM_COMMIT}" | sed 's/^\(........\).*/\1/;q')

            # Get commit message
            COMMIT_MESSAGE=$(git log --format=%B -n 1 $CM_COMMIT)
            
            # Get commit author
            AUTHOR=$(git show -s --format='%ae' $CM_COMMIT)
            
            # Publish the notification
            curl -H "Content-Type: multipart/form-data" \
            -F 'payload_json={"username" : "codemagic-bot", "content": "**Commit:** `'"$COMMIT"'`\n\n**Commit message:** '"$COMMIT_MESSAGE"'\n\n**Branch:** '"$CM_BRANCH"'\n\n**Author:** '"$AUTHOR"'\n\n**Artifacts: **\n\n'"$APP_LINK"'\n\n"}' \
            -F "file1=@release_notes.txt" \
            $WEBHOOK_URL
  # react-native-ios:
  #   name: React Native iOS
  #   max_build_duration: 120
  #   environment:
  #     groups:
  #       - keystore credentials
  #       - firebase_credentials
  #       - discord_credentials 
  #     vars:
  #       PACKAGE_NAME: 'com.exploreApp' # <-- Put your package name here e.g. com.domain.myapp
  #       BUNDLE_ID: "org.reactjs.native.example.exploreApp"
  #       node: latest
  #       CM_CLONE_DEPTH: 8
  #       CM_PULL_REQUEST: true
  #       XCODE_WORKSPACE: exploreApp.xcworkspace
  #       XCODE_SCHEME: exploreApp
  #   triggering:
  #     events:
  #       - push
  #       - tag
  #       - pull_request
  #     branch_patterns:
  #       - pattern: main
  #         include: true
  #         source: true
  #   scripts:
  #     - name: Generating release notes with git commits
  #       script: | 
  #         git fetch --all --tags
  #         branch=$(git branch --show-current)
  #         prev_tag=$(git for-each-ref --sort=-creatordate --format '%(objectname)' refs/tags | sed -n 2p )
  #         notes=$(git log --oneline "$branch" --pretty=format:"- %s" "$prev_tag"..HEAD)
  #         echo "[Explore App - $branch] \n\nNotes: \n$notes" | tee release_notes.txt
  #     - name: pre_build_script
  #       script: |
  #         #!/usr/bin/env sh
  #         export VARNAME="my value"
  #         set -e # exit on first failed command
  #         echo $ANDROID_FIREBASE_SECRET | base64 --decode > $CM_BUILD_DIR/android/app/google-services.json
  #         # echo $IOS_FIREBASE_SECRET | base64 --decode > $CM_BUILD_DIR/ios/Runner/GoogleService-Info.plist
  #     - name: Install yarn dependencies
  #       script: |
  #         yarn
  #     - name: Pod install
  #       script: |
  #         # build iOS
  #           cd ios
  #           pod install
  #   artifacts:
  #    - build/ios/ipa/*.ipa
  #    - /tmp/xcodebuild_logs/*.log
  #    - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
  #    - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
  #   publishing:
  #     # See the following link for details about email publishing - https://docs.codemagic.io/publishing-yaml/distribution/#email
  #     email:
  #       recipients:
  #         - ahmadfathonizumaro@gmail.com
  #         - toniebe48@gmail.com
  #       notify:
  #         success: true # To not receive a notification when a build succeeds
  #         failure: false # To not receive a notification when a build fails
  #     firebase:
  #       firebase_service_account: $FIREBASE_SERVICE_ACCOUNT
  #       ios:
  #         app_id: 1:953175852743:ios:9c5ffe705e8347caf1a0e2
  #         groups:
  #           - appTester